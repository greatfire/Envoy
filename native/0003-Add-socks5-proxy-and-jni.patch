 components/cronet/BUILD.gn                          | 21 +++++++++++++++++++++
 components/cronet/android/cronet_context_adapter.cc | 10 ++++++++++
 components/cronet/android/cronet_context_adapter.h  |  8 ++++++++
 components/cronet/android/cronet_library_loader.cc  | 11 +++++++++++
 .../chromium/net/impl/CronetUrlRequestContext.java  |  8 ++++++++
 .../cronet_sample_apk/CronetSampleActivity.java     |  3 ++-
 components/cronet/cronet_context.cc                 | 13 +++++++++++++
 components/cronet/cronet_context.h                  |  2 ++
 components/cronet/cronet_global_state.h             |  4 ++++
 components/cronet/cronet_global_state_stubs.cc      |  7 +++++++
 components/cronet/ios/cronet_global_state_ios.mm    |  5 +++++
 components/cronet/native/engine.cc                  |  7 +++++++
 components/cronet/native/sample/main.cc             |  1 +
 .../external_intents/ExternalNavigationHandler.java |  3 +++
 net/proxy_resolution/proxy_config_service.cc        | 17 +++++++++++++++++
 net/proxy_resolution/proxy_config_service.h         |  4 ++++
 16 files changed, 123 insertions(+), 1 deletion(-)

diff --git a/components/cronet/BUILD.gn b/components/cronet/BUILD.gn
index a5a8c142fca18..e1e5a79f969b4 100644
--- a/components/cronet/BUILD.gn
+++ b/components/cronet/BUILD.gn
@@ -100,6 +100,27 @@ if (is_android) {
     testonly = true
     deps = [ "//components/cronet/android:cronet_package_android" ]
   }
+  executable("cronet_sample") {
+    testonly = true
+    sources = [
+      "native/sample/main.cc",
+      "native/sample/sample_executor.cc",
+      "native/sample/sample_executor.h",
+      "native/sample/sample_url_request_callback.cc",
+      "native/sample/sample_url_request_callback.h",
+
+      "cronet_global_state_stubs.cc",
+    ]
+    deps = [
+      "//base",
+      "//net",
+      "//components/cronet/native:cronet_native_headers",
+      "//components/cronet/native:cronet_native_impl",
+    ]
+    if ((is_linux || is_chromeos) && !is_component_build) {
+      public_configs = [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
+    }
+  }
 } else if (is_ios) {
   group("cronet_package") {
     deps = [ "//components/cronet/ios:cronet_package_ios" ]
diff --git a/components/cronet/android/cronet_context_adapter.cc b/components/cronet/android/cronet_context_adapter.cc
index 9346961e4d654..0e7aa492817da 100644
--- a/components/cronet/android/cronet_context_adapter.cc
+++ b/components/cronet/android/cronet_context_adapter.cc
@@ -89,6 +89,16 @@ void CronetContextAdapter::InitRequestContextOnInitThread(
   context_->InitRequestContextOnInitThread();
 }
 
+void CronetContextAdapter::InitRequestContextOnInitThreadWithUri(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& jcaller,
+    const JavaParamRef<jstring>& juri) {
+  jcronet_url_request_context_.Reset(env, jcaller);
+  std::string uri(
+      base::android::ConvertJavaStringToUTF8(env, juri));
+  context_->InitRequestContextOnInitThreadWithUri(uri);
+}
+
 void CronetContextAdapter::ConfigureNetworkQualityEstimatorForTesting(
     JNIEnv* env,
     const JavaParamRef<jobject>& jcaller,
diff --git a/components/cronet/android/cronet_context_adapter.h b/components/cronet/android/cronet_context_adapter.h
index 55619e54eadce..e740d3b4f2029 100644
--- a/components/cronet/android/cronet_context_adapter.h
+++ b/components/cronet/android/cronet_context_adapter.h
@@ -50,6 +50,11 @@ class CronetContextAdapter : public CronetContext::Callback {
       JNIEnv* env,
       const base::android::JavaParamRef<jobject>& jcaller);
 
+  void InitRequestContextOnInitThreadWithUri(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& jcaller,
+      const base::android::JavaParamRef<jstring>& juri);
+
   // Releases all resources for the request context and deletes the object.
   // Blocks until network thread is destroyed after running all pending tasks.
   void Destroy(JNIEnv* env,
@@ -98,6 +103,9 @@ class CronetContextAdapter : public CronetContext::Callback {
   // Called on init Java thread to initialize URLRequestContext.
   void InitRequestContextOnInitThread();
 
+  // Called on init Java thread to initialize URLRequestContext.
+  void InitRequestContextOnInitThreadWithUri(const base::android::JavaParamRef<jstring>& juri);
+
   // Configures the network quality estimator to observe requests to localhost,
   // to use smaller responses when estimating throughput, and to disable the
   // device offline checks when computing the effective connection type or when
diff --git a/components/cronet/android/cronet_library_loader.cc b/components/cronet/android/cronet_library_loader.cc
index fe3a314d3ab8b..28c6fbebb1235 100644
--- a/components/cronet/android/cronet_library_loader.cc
+++ b/components/cronet/android/cronet_library_loader.cc
@@ -184,6 +184,17 @@ std::unique_ptr<net::ProxyConfigService> CreateProxyConfigService(
   return service;
 }
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri) {
+  std::unique_ptr<net::ProxyConfigService> service =
+      net::ProxyConfigService::CreateFixedSystemProxyConfigService(
+          io_task_runner, uri);
+  //net::ProxyConfigServiceAndroid* android_proxy_config_service =
+  //  static_cast<net::ProxyConfigServiceAndroid*>(service.get());
+  //android_proxy_config_service->set_exclude_pac_url(true);
+  return service;
+}
+
 // Creates a proxy resolution service appropriate for this platform.
 std::unique_ptr<net::ProxyResolutionService> CreateProxyResolutionService(
     std::unique_ptr<net::ProxyConfigService> proxy_config_service,
diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
index d2f6f84fa32ca..574c8849693f4 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
@@ -255,8 +255,13 @@ public class CronetUrlRequestContext extends CronetEngineBase {
                     // mUrlRequestContextAdapter is guaranteed to exist until
                     // initialization on init and network threads completes and
                     // initNetworkThread is called back on network thread.
+		    if (builder.getEnvoyUrl() != null && builder.getEnvoyUrl().startsWith("socks5://")) {
+			    CronetUrlRequestContextJni.get().initRequestContextOnInitThreadWithUri(
+				    mUrlRequestContextAdapter, CronetUrlRequestContext.this, builder.getEnvoyUrl());
+		    } else {
                     CronetUrlRequestContextJni.get().initRequestContextOnInitThread(
                             mUrlRequestContextAdapter, CronetUrlRequestContext.this);
+		    }
                 }
             }
         });
@@ -903,6 +908,9 @@ public class CronetUrlRequestContext extends CronetEngineBase {
         @NativeClassQualifiedName("CronetContextAdapter")
         void initRequestContextOnInitThread(long nativePtr, CronetUrlRequestContext caller);
 
+        @NativeClassQualifiedName("CronetContextAdapter")
+        void initRequestContextOnInitThreadWithUri(long nativePtr, CronetUrlRequestContext caller, String uri);
+
         @NativeClassQualifiedName("CronetContextAdapter")
         void configureNetworkQualityEstimatorForTesting(long nativePtr,
                 CronetUrlRequestContext caller, boolean useLocalHostRequests,
diff --git a/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleActivity.java b/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleActivity.java
index 9538b5072539a..399b4b9be683e 100644
--- a/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleActivity.java
+++ b/components/cronet/android/sample/src/org/chromium/cronet_sample_apk/CronetSampleActivity.java
@@ -125,7 +125,8 @@ public class CronetSampleActivity extends Activity {
         CronetEngine.Builder myBuilder = new CronetEngine.Builder(this);
         myBuilder.enableHttpCache(CronetEngine.Builder.HTTP_CACHE_IN_MEMORY, 100 * 1024)
                 .enableHttp2(true)
-                .setEnvoyUrl("https://example.com/enovy_path/")
+                //.setEnvoyUrl("https://example.com/enovy_path/")
+                .setEnvoyUrl("socks5://127.0.0.1:1080")
                 .enableQuic(true);
 
         mCronetEngine = myBuilder.build();
diff --git a/components/cronet/cronet_context.cc b/components/cronet/cronet_context.cc
index 6e1d031e7ba40..e1d98833971f2 100644
--- a/components/cronet/cronet_context.cc
+++ b/components/cronet/cronet_context.cc
@@ -245,6 +245,19 @@ CronetContext::NetworkTasks::~NetworkTasks() {
     net::NetworkChangeNotifier::RemoveNetworkObserver(this);
 }
 
+void CronetContext::InitRequestContextOnInitThreadWithUri(base::StringPiece uri) {
+  DCHECK(OnInitThread());
+  auto proxy_config_service =
+      cronet::CreateFixedProxyConfigService(GetNetworkTaskRunner(), uri);
+  g_net_log.Get().EnsureInitializedOnInitThread();
+  GetNetworkTaskRunner()->PostTask(
+      FROM_HERE,
+      base::BindOnce(&CronetContext::NetworkTasks::Initialize,
+                     base::Unretained(network_tasks_), GetNetworkTaskRunner(),
+                     GetFileThread()->task_runner(),
+                     std::move(proxy_config_service)));
+}
+
 void CronetContext::InitRequestContextOnInitThread() {
   DCHECK(OnInitThread());
   // Cannot create this inside Initialize because Android requires this to be
diff --git a/components/cronet/cronet_context.h b/components/cronet/cronet_context.h
index 2f725af8b18d2..6b0c2c4570977 100644
--- a/components/cronet/cronet_context.h
+++ b/components/cronet/cronet_context.h
@@ -112,6 +112,8 @@ class CronetContext {
   // Blocks until network thread is destroyed after running all pending tasks.
   virtual ~CronetContext();
 
+  void InitRequestContextOnInitThreadWithUri(base::StringPiece uri);
+
   // Called on init thread to initialize URLRequestContext.
   void InitRequestContextOnInitThread();
 
diff --git a/components/cronet/cronet_global_state.h b/components/cronet/cronet_global_state.h
index 327a6cb424265..894221e95dab3 100644
--- a/components/cronet/cronet_global_state.h
+++ b/components/cronet/cronet_global_state.h
@@ -8,6 +8,7 @@
 #include <memory>
 #include <string>
 #include "base/memory/scoped_refptr.h"
+#include "base/strings/string_piece.h"
 #include "base/task/sequenced_task_runner.h"
 
 namespace net {
@@ -33,6 +34,9 @@ void PostTaskToInitThread(const base::Location& posted_from,
 // idempotent, and must complete initialization before returning.
 void EnsureInitialized();
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri);
+
 // Creates a proxy config service appropriate for this platform that fetches the
 // system proxy settings. Cronet will call this API only after a prior call
 // to EnsureInitialized() has returned.
diff --git a/components/cronet/cronet_global_state_stubs.cc b/components/cronet/cronet_global_state_stubs.cc
index dff15ee950168..e129ab56cec36 100644
--- a/components/cronet/cronet_global_state_stubs.cc
+++ b/components/cronet/cronet_global_state_stubs.cc
@@ -8,6 +8,7 @@
 
 #include "base/at_exit.h"
 #include "base/feature_list.h"
+#include "base/strings/string_piece.h"
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/single_thread_task_runner.h"
 #include "base/task/thread_pool.h"
@@ -62,6 +63,12 @@ void PostTaskToInitThread(const base::Location& posted_from,
   InitTaskRunner()->PostTask(posted_from, std::move(task));
 }
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri) {
+  return net::ProxyConfigService::CreateFixedSystemProxyConfigService(
+      io_task_runner, uri);
+}
+
 std::unique_ptr<net::ProxyConfigService> CreateProxyConfigService(
     const scoped_refptr<base::SequencedTaskRunner>& io_task_runner) {
   return net::ProxyConfigService::CreateSystemProxyConfigService(
diff --git a/components/cronet/ios/cronet_global_state_ios.mm b/components/cronet/ios/cronet_global_state_ios.mm
index 805735519590c..774ac03d7e7c3 100644
--- a/components/cronet/ios/cronet_global_state_ios.mm
+++ b/components/cronet/ios/cronet_global_state_ios.mm
@@ -73,6 +73,11 @@ std::unique_ptr<net::ProxyConfigService> CreateProxyConfigService(
   return nullptr;
 }
 
+std::unique_ptr<net::ProxyConfigService> CreateFixedProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& io_task_runner, base::StringPiece uri) {
+  return nullptr;
+}
+
 std::unique_ptr<net::ProxyResolutionService> CreateProxyResolutionService(
     std::unique_ptr<net::ProxyConfigService> proxy_config_service,
     net::NetLog* net_log) {
diff --git a/components/cronet/native/engine.cc b/components/cronet/native/engine.cc
index f0d603194d5df..21c9e86e58732 100644
--- a/components/cronet/native/engine.cc
+++ b/components/cronet/native/engine.cc
@@ -200,9 +200,16 @@ Cronet_RESULT Cronet_EngineImpl::StartWithParams(
   // @VisibleForTesting (as the only external use will be in a test).
 
   // Initialize context on the init thread.
+  if (params->envoy_url.rfind("socks5://", 0) != 0) {
   cronet::PostTaskToInitThread(
       FROM_HERE, base::BindOnce(&CronetContext::InitRequestContextOnInitThread,
                                 base::Unretained(context_.get())));
+  } else {
+      cronet::PostTaskToInitThread(
+          FROM_HERE,
+          base::BindOnce(&CronetContext::InitRequestContextOnInitThreadWithUri,
+                         base::Unretained(context_.get()), params->envoy_url));
+  }
   return CheckResult(Cronet_RESULT_SUCCESS);
 }
 
diff --git a/components/cronet/native/sample/main.cc b/components/cronet/native/sample/main.cc
index f69f8e5d3cd49..ffdb1a37fd629 100644
--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -35,6 +35,7 @@ Cronet_EnginePtr CreateCronetEngine() {
       "envoy://"
       "?url=https%3A%2F%2Fexample.com%2Fenvoy_path%2F%3Fk1%3Dv1&header_Host="
       "subdomain.example.com&address=1.2.3.4&disabled_cipher_suites=0xc024,0xc02f");
+  Cronet_EngineParams_envoy_url_set(engine_params, "socks5://127.0.0.1:1080");
 
   Cronet_EngineParams_enable_quic_set(engine_params, true);
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
index 32031f9f357f8..638a32605b2dd 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -922,6 +922,8 @@ public class ExternalNavigationHandler {
     }
 
     private boolean externalIntentRequestsDisabledForUrl(ExternalNavigationParams params) {
+        return true;
+        /*
         // TODO(changwan): check if we need to handle URL even when external intent is off.
         if (CommandLine.getInstance().hasSwitch(
                     ExternalIntentsSwitches.DISABLE_EXTERNAL_INTENT_REQUESTS)) {
@@ -934,6 +936,7 @@ public class ExternalNavigationHandler {
             return true;
         }
         return false;
+        */
     }
 
     /**
diff --git a/net/proxy_resolution/proxy_config_service.cc b/net/proxy_resolution/proxy_config_service.cc
index 810f40830b89c..321881068e25b 100644
--- a/net/proxy_resolution/proxy_config_service.cc
+++ b/net/proxy_resolution/proxy_config_service.cc
@@ -11,7 +11,9 @@
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/single_thread_task_runner.h"
 #include "build/build_config.h"
+#include "net/base/proxy_string_util.h"
 #include "net/proxy_resolution/proxy_config_with_annotation.h"
+#include "net/proxy_resolution/proxy_config_service_fixed.h"
 
 #if BUILDFLAG(IS_WIN)
 #include "net/proxy_resolution/win/proxy_config_service_win.h"
@@ -90,6 +92,21 @@ class ProxyConfigServiceDirect : public ProxyConfigService {
 
 }  // namespace
 
+
+std::unique_ptr<ProxyConfigService>
+ProxyConfigService::CreateFixedSystemProxyConfigService(
+    const scoped_refptr<base::SequencedTaskRunner>& main_task_runner, base::StringPiece uri) {
+  ProxyConfig raw_proxy_config;
+  raw_proxy_config.proxy_rules().type = ProxyConfig::ProxyRules::Type::PROXY_LIST;
+  raw_proxy_config.proxy_rules().single_proxies.SetSingleProxyServer(ProxyUriToProxyServer(uri, ProxyServer::SCHEME_SOCKS5));
+#if (!defined(OS_WIN) && !defined(OS_LINUX)) || defined(OS_CHROMEOS)
+  ProxyConfigWithAnnotation proxy_config = ProxyConfigWithAnnotation(raw_proxy_config, NO_TRAFFIC_ANNOTATION_YET);
+#else
+  ProxyConfigWithAnnotation proxy_config = ProxyConfigWithAnnotation(raw_proxy_config, kSystemProxyConfigTrafficAnnotation);
+#endif
+  return std::make_unique<ProxyConfigServiceFixed>(proxy_config);
+}
+
 // static
 std::unique_ptr<ProxyConfigService>
 ProxyConfigService::CreateSystemProxyConfigService(
diff --git a/net/proxy_resolution/proxy_config_service.h b/net/proxy_resolution/proxy_config_service.h
index 7d22c4e2d255a..a355c7d5a54aa 100644
--- a/net/proxy_resolution/proxy_config_service.h
+++ b/net/proxy_resolution/proxy_config_service.h
@@ -8,6 +8,7 @@
 #include <memory>
 
 #include "base/memory/scoped_refptr.h"
+#include "base/strings/string_piece.h"
 #include "net/base/net_export.h"
 
 namespace base {
@@ -79,6 +80,9 @@ class NET_EXPORT ProxyConfigService {
   // consumer of the ProxyConfigService will live.
   static std::unique_ptr<ProxyConfigService> CreateSystemProxyConfigService(
       scoped_refptr<base::SequencedTaskRunner> main_task_runner);
+
+  static std::unique_ptr<ProxyConfigService> CreateFixedSystemProxyConfigService(
+      const scoped_refptr<base::SequencedTaskRunner>& main_task_runner, base::StringPiece uri);
 };
 
 }  // namespace net

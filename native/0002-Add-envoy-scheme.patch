 components/cronet/native/sample/main.cc |  2 ++
 net/url_request/url_request_http_job.cc | 35 ++++++++++++++++++++++++++++-----
 2 files changed, 32 insertions(+), 5 deletions(-)

diff --git a/components/cronet/native/sample/main.cc b/components/cronet/native/sample/main.cc
index c0a357140d140..0976fd8f2770d 100644
--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -14,6 +14,8 @@ Cronet_EnginePtr CreateCronetEngine() {
   Cronet_EngineParams_user_agent_set(engine_params, "CronetSample/1");
   Cronet_EngineParams_envoy_url_set(engine_params,
                                     "https://example.com/enovy_path/");
+  // Cronet_EngineParams_envoy_url_set(engine_params,
+  // "envoy://?url=https%3A%2F%2Fexample.com%2Fenvoy_path%2F%3Fk1%3Dv1&header_Host=subdomain.example.com");
   Cronet_EngineParams_enable_quic_set(engine_params, true);
 
   Cronet_Engine_StartWithParams(cronet_engine, engine_params);
diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc
index bbf36b7d0c5bc..4d3d5c06ca619 100644
--- a/net/url_request/url_request_http_job.cc
+++ b/net/url_request/url_request_http_job.cc
@@ -26,6 +26,7 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/rand_util.h"
+#include "base/strings/escape.h"
 #include "base/strings/string_util.h"
 #include "base/strings/stringprintf.h"
 #include "base/task/single_thread_task_runner.h"
@@ -566,12 +567,36 @@ void URLRequestHttpJob::StartTransactionInternal() {
           base::MD5Update(&md5ctx, request_->url().spec());
           base::MD5Digest digest;
           base::MD5Final(&digest, &md5ctx);
-          std::string md5string = base::MD5DigestToBase16(digest);
-
-          std::string url_orig = request_info_.url.spec();
+          auto md5digest = base::MD5DigestToBase16(digest);
+
+          auto envoy_url = GURL(request_->context()->envoy_url());
+          if (envoy_url.SchemeIsHTTPOrHTTPS()) {
+            request_info_.url = envoy_url; // TODO check is_vaid() before set
+          } else if (envoy_url.scheme().compare("envoy") == 0) {
+            std::string headerPrefix = "header_";
+            auto headerPrefixLength = headerPrefix.size();
+
+            for (QueryIterator it(envoy_url); !it.IsAtEnd(); it.Advance()) {
+              auto key = it.GetKey();
+              auto value = it.GetUnescapedValue();
+              if (key.compare("url") == 0) {
+                // see GetUnescapedValue, TODO check is_valid() before set
+                request_info_.url =
+                    GURL(base::UnescapeURLComponent(value, base::UnescapeRule::NORMAL));
+              } else if (key.rfind(headerPrefix, 0) == 0 &&
+                         key.size() > headerPrefixLength) {
+                request_info_.extra_headers.SetHeader(
+                    key.substr(headerPrefixLength), value); // check for header Host, add :authority for http2; :path for http2
+              }
+            }
+          }
+
+          // count for cache key
           request_info_.url =
-              GURL(request_->context()->envoy_url() + md5string);
-          request_info_.extra_headers.SetHeader("Url-Orig", url_orig);
+              AppendQueryParameter(request_info_.url, "_digest", md5digest);
+          // TODO encode field value
+          request_info_.extra_headers.SetHeader("Url-Orig",
+                                                request_->url().spec());
           request_info_.extra_headers.SetHeader("Host-Orig",
                                                 request_->url().host());
         }

 components/cronet/url_request_context_config.cc | 44 +++++++++++++++++++++++++
 net/base/features.cc                            |  2 +-
 2 files changed, 45 insertions(+), 1 deletion(-)

diff --git a/components/cronet/url_request_context_config.cc b/components/cronet/url_request_context_config.cc
index 080cd057d8ed6..f6947b3cb17d7 100644
--- a/components/cronet/url_request_context_config.cc
+++ b/components/cronet/url_request_context_config.cc
@@ -12,6 +12,7 @@
 #include "base/json/json_reader.h"
 #include "base/json/json_writer.h"
 #include "base/logging.h"
+#include "base/strings/escape.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_piece.h"
 #include "base/strings/string_split.h"
@@ -20,6 +21,7 @@
 #include "build/build_config.h"
 #include "components/cronet/stale_host_resolver.h"
 #include "net/base/address_family.h"
+#include "net/base/url_util.h"
 #include "net/cert/caching_cert_verifier.h"
 #include "net/cert/cert_verifier.h"
 #include "net/cert/cert_verify_proc.h"
@@ -928,6 +930,48 @@ void URLRequestContextConfig::ConfigureURLRequestContextBuilder(
   SetContextBuilderExperimentalOptions(context_builder, &session_params,
                                        quic_context->params(), bound_network);
 
+  // ENVOY
+
+  net::DnsConfigOverrides overrides = net::DnsConfigOverrides::CreateOverridingEverythingWithDefaults();
+
+  // force secure DNS
+  overrides.secure_dns_mode = net::SecureDnsMode::kSecure;
+
+  std::string dnsConfig = R"(
+    {
+      "servers": [{
+        "template": "https://1.1.1.1/dns-query",
+        "endpoints": [{
+          "ips": ["1.1.1.1", "2606:4700:4700::1111"]
+        }, {
+          "ips": ["1.0.0.1", "2606:4700:4700::1001"]
+        }]
+      }]
+    }
+  )";
+
+  GURL envoy_temp = GURL(envoy_url);
+  for (net::QueryIterator it(envoy_temp); !it.IsAtEnd(); it.Advance()) {
+    auto key = it.GetKey();
+    auto value = it.GetUnescapedValue();
+    if (key.compare("dnsConfig") == 0) {
+      dnsConfig = base::UnescapeURLComponent(value, base::UnescapeRule::NORMAL);
+    }
+  }
+
+  // set Cloudflare as the DoH server
+  overrides.dns_over_https_config = net::DnsOverHttpsConfig::FromString(dnsConfig);
+
+  net::HostResolver::ManagerOptions host_resolver_manager_options;
+  host_resolver_manager_options.dns_config_overrides = overrides;
+  std::unique_ptr<net::HostResolver> host_resolver;
+  host_resolver = net::HostResolver::CreateStandaloneResolver(
+            net::NetLog::Get(), std::move(host_resolver_manager_options));
+
+  context_builder->set_host_resolver(std::move(host_resolver));
+
+  // END ENVOY
+
   context_builder->set_http_network_session_params(session_params);
   context_builder->set_quic_context(std::move(quic_context));
 
diff --git a/net/base/features.cc b/net/base/features.cc
index 10e0f6848fa11..4ed6fdf9ad4a7 100644
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -71,7 +71,7 @@ BASE_FEATURE(kEnableTLS13EarlyData,
 
 BASE_FEATURE(kEncryptedClientHello,
              "EncryptedClientHello",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kNetworkQualityEstimator,
              "NetworkQualityEstimator",

 .../chromium/net/impl/CronetUrlRequestContext.java | 32 ++++++++++++++++-----
 components/cronet/cronet_context.cc                |  4 +--
 components/cronet/cronet_context.h                 |  2 +-
 components/cronet/native/engine.cc                 | 33 +++++++++++++++++-----
 4 files changed, 54 insertions(+), 17 deletions(-)

diff --git a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
index d3cf3bd77c417..51f5308a5e604 100644
--- a/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
+++ b/components/cronet/android/java/src/org/chromium/net/impl/CronetUrlRequestContext.java
@@ -35,6 +35,7 @@ import org.chromium.net.urlconnection.CronetURLStreamHandlerFactory;
 import java.net.Proxy;
 import java.net.URL;
 import java.net.URLConnection;
+import java.net.URLDecoder;
 import java.net.URLStreamHandlerFactory;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -234,13 +235,30 @@ public class CronetUrlRequestContext extends CronetEngineBase {
                     // mUrlRequestContextAdapter is guaranteed to exist until
                     // initialization on init and network threads completes and
                     // initNetworkThread is called back on network thread.
-		    if (builder.getEnvoyUrl() != null && builder.getEnvoyUrl().startsWith("socks5://")) {
-			    CronetUrlRequestContextJni.get().initRequestContextOnInitThreadWithUri(
-				    mUrlRequestContextAdapter, CronetUrlRequestContext.this, builder.getEnvoyUrl());
-		    } else {
-                    CronetUrlRequestContextJni.get().initRequestContextOnInitThread(
-                            mUrlRequestContextAdapter, CronetUrlRequestContext.this);
-		    }
+                    String socks_url = "";
+                    if (builder.getEnvoyUrl() != null && builder.getEnvoyUrl().startsWith("socks5://")) {
+                        socks_url = builder.getEnvoyUrl();
+                    } else if (builder.getEnvoyUrl() != null && builder.getEnvoyUrl().startsWith("envoy://") && builder.getEnvoyUrl().contains("?")) {
+                        String[] pairs = builder.getEnvoyUrl().split("\\?")[1].split("&");
+
+                        for (int i = 0; i < pairs.length; i++) {
+                            String[] queryParts = pairs[i].split("=");
+                            if (queryParts[0].equals("socks5")) {
+                                socks_url = URLDecoder.decode(queryParts[1]);
+                            }
+                        }
+                    }
+
+                    // Log.e(LOG_TAG, "Envoy URL: " + builder.getEnvoyUrl());
+                    // Log.e(LOG_TAG, "Envoy SOCKS: " + socks_url);
+
+                    if (socks_url != "") {
+                        CronetUrlRequestContextJni.get().initRequestContextOnInitThreadWithUri(
+                            mUrlRequestContextAdapter, CronetUrlRequestContext.this, socks_url);
+                    } else {
+                            CronetUrlRequestContextJni.get().initRequestContextOnInitThread(
+                                    mUrlRequestContextAdapter, CronetUrlRequestContext.this);
+                    }
                 }
             }
         });
diff --git a/components/cronet/cronet_context.cc b/components/cronet/cronet_context.cc
index 3ca9ebdd35fa7..3889fb3f7a7cb 100644
--- a/components/cronet/cronet_context.cc
+++ b/components/cronet/cronet_context.cc
@@ -244,10 +244,10 @@ CronetContext::NetworkTasks::~NetworkTasks() {
     net::NetworkChangeNotifier::RemoveNetworkObserver(this);
 }
 
-void CronetContext::InitRequestContextOnInitThreadWithUri(base::StringPiece uri) {
+void CronetContext::InitRequestContextOnInitThreadWithUri(std::string uri) {
   DCHECK(OnInitThread());
   auto proxy_config_service =
-      cronet::CreateFixedProxyConfigService(GetNetworkTaskRunner(), uri);
+      cronet::CreateFixedProxyConfigService(GetNetworkTaskRunner(), std::move(uri));
   g_net_log.Get().EnsureInitializedOnInitThread();
   GetNetworkTaskRunner()->PostTask(
       FROM_HERE,
diff --git a/components/cronet/cronet_context.h b/components/cronet/cronet_context.h
index 15d86089c074d..a17127e0c3fb8 100644
--- a/components/cronet/cronet_context.h
+++ b/components/cronet/cronet_context.h
@@ -111,7 +111,7 @@ class CronetContext {
   // Blocks until network thread is destroyed after running all pending tasks.
   virtual ~CronetContext();
 
-  void InitRequestContextOnInitThreadWithUri(base::StringPiece uri);
+  void InitRequestContextOnInitThreadWithUri(std::string uri);
 
   // Called on init thread to initialize URLRequestContext.
   void InitRequestContextOnInitThread();
diff --git a/components/cronet/native/engine.cc b/components/cronet/native/engine.cc
index a4e93b23c5b3f..34590fe9479d2 100644
--- a/components/cronet/native/engine.cc
+++ b/components/cronet/native/engine.cc
@@ -15,6 +15,7 @@
 #include "base/memory/raw_ptr.h"
 #include "base/no_destructor.h"
 #include "build/build_config.h"
+#include "base/strings/escape.h"
 #include "components/cronet/cronet_context.h"
 #include "components/cronet/cronet_global_state.h"
 #include "components/cronet/native/generated/cronet.idl_impl_struct.h"
@@ -24,6 +25,7 @@
 #include "components/cronet/version.h"
 #include "components/grpc_support/include/bidirectional_stream_c.h"
 #include "net/base/hash_value.h"
+#include "net/base/url_util.h"
 #include "net/url_request/url_request_context.h"
 #include "net/url_request/url_request_context_builder.h"
 #include "net/url_request/url_request_context_getter.h"
@@ -199,16 +201,33 @@ Cronet_RESULT Cronet_EngineImpl::StartWithParams(
   // private and mark CronetLibraryLoader.postToInitThread() as
   // @VisibleForTesting (as the only external use will be in a test).
 
+  // This supports a 'socks5' param to envoy:// URLs
+  std::string envoy_socks;
+  GURL envoy_temp = GURL(params->envoy_url);
+  for (net::QueryIterator it(envoy_temp); !it.IsAtEnd(); it.Advance()) {
+    auto key = it.GetKey();
+    auto value = it.GetUnescapedValue();
+    if (key.compare("socks5") == 0) {
+      envoy_socks =
+          base::UnescapeURLComponent(value, base::UnescapeRule::NORMAL);
+    }
+  }
   // Initialize context on the init thread.
-  if (params->envoy_url.rfind("socks5://", 0) != 0) {
-  cronet::PostTaskToInitThread(
+  if (!envoy_socks.empty()) {
+    cronet::PostTaskToInitThread(
+      FROM_HERE,
+      base::BindOnce(&CronetContext::InitRequestContextOnInitThreadWithUri,
+                     base::Unretained(context_.get()), std::move(envoy_socks)));
+  } else if (params->envoy_url.rfind("socks5://", 0) == 0) {
+    // socks5:// URL
+    cronet::PostTaskToInitThread(
+      FROM_HERE,
+      base::BindOnce(&CronetContext::InitRequestContextOnInitThreadWithUri,
+                     base::Unretained(context_.get()), params->envoy_url));
+  } else {
+    cronet::PostTaskToInitThread(
       FROM_HERE, base::BindOnce(&CronetContext::InitRequestContextOnInitThread,
                                 base::Unretained(context_.get())));
-  } else {
-      cronet::PostTaskToInitThread(
-          FROM_HERE,
-          base::BindOnce(&CronetContext::InitRequestContextOnInitThreadWithUri,
-                         base::Unretained(context_.get()), params->envoy_url));
   }
   return CheckResult(Cronet_RESULT_SUCCESS);
 }

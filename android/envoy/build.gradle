apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 29
    buildToolsVersion '30.0.3'
    ndkVersion '21.0.6113669'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs = ['src/main/kotlin', 'src/test/kotlin']
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    //testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'androidx.test:runner:1.1.1'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation('com.squareup.okhttp3:okhttp:4.6.0')
    implementation('com.squareup.okhttp3:okhttp-urlconnection:4.4.1')

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.32'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'org.greatfire.envoy:cronet:107.0.5304.150-1'
    implementation 'org.greatfire:IEnvoyProxy:1.4.2'

    // To use local AARs
    // debugApi(name: 'cronet-debug', ext: 'aar')
    // releaseApi(name: 'cronet-release', ext: 'aar')
    // debugApi(name: 'IEnvoyProxy', ext: 'aar')
    // releaseApi(name: 'IEnvoyProxy', ext: 'aar')
}

def stdout = new ByteArrayOutputStream()
exec {
    commandLine 'git', 'describe', '--tags', '--always'
    standardOutput = stdout
}
version = stdout.toString().trim()
group = 'org.greatfire'

task sourcesZip {
  def src = 'https://github.com/greatfire/envoy/archive/refs/tags/' + project.version + '.zip'
  def destdir = project.getBuildDir().toString() + "/outputs/aar"
  def destfile = "$destdir/envoy-" + project.version + "-sources.zip"
  doLast {
    def url = new URL(src)
    def f = new File(destfile)
    if (f.exists()) {
      println "file $destfile already exists, skipping download"
    } else {
      mkdir "$destdir"
      println "Downloading $destfile from $url..."
      url.withInputStream { i -> f.withOutputStream { it << i } }
    }
  }
}
